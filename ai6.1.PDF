{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM6pHGDAm2cscN52ao7OhuM",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sindhumandati2007/AIAC/blob/main/Untitled0.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task1;generate a factorial function\n",
        "promp1:write a code for factorial number"
      ],
      "metadata": {
        "id": "nc39rZbjuBic"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d7b93f0f",
        "outputId": "31552246-b54e-419d-8b5b-4d206a0ada7d"
      },
      "source": [
        "def factorial(n):\n",
        "  \"\"\"Calculates the factorial of a non-negative integer.\n",
        "\n",
        "  Args:\n",
        "    n: The non-negative integer.\n",
        "\n",
        "  Returns:\n",
        "    The factorial of n.\n",
        "  \"\"\"\n",
        "  if n < 0:\n",
        "    return \"Factorial is not defined for negative numbers\"\n",
        "  elif n == 0:\n",
        "    return 1\n",
        "  else:\n",
        "    result = 1\n",
        "    for i in range(1, n + 1):\n",
        "      result *= i\n",
        "    return result\n",
        "\n",
        "# Example usage:\n",
        "num = 5\n",
        "print(f\"The factorial of {num} is {factorial(num)}\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The factorial of 5 is 120\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Explanation:**\n",
        "This Python code defines a function factorial(n) that calculates the factorial of a number n. It handles negative numbers and the base case of 0. For positive numbers, it iteratively multiplies integers from 1 to n."
      ],
      "metadata": {
        "id": "GQT7MzZIvhJG"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "prompt2:check given number is factorial or not"
      ],
      "metadata": {
        "id": "B2IFFF6ZwQMV"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f5b51e52",
        "outputId": "bb5055ad-65c3-4c96-91af-0138e855c8a0"
      },
      "source": [
        "import math\n",
        "\n",
        "def is_factorial(n):\n",
        "  \"\"\"Checks if a given number is a factorial of any non-negative integer.\n",
        "\n",
        "  Args:\n",
        "    n: The number to check.\n",
        "\n",
        "  Returns:\n",
        "    True if n is a factorial, False otherwise.\n",
        "  \"\"\"\n",
        "  if n < 0:\n",
        "    return False\n",
        "  if n == 1:\n",
        "    return True # 0! and 1! are both 1\n",
        "\n",
        "  fact = 1\n",
        "  i = 1\n",
        "  while fact < n:\n",
        "    i += 1\n",
        "    fact *= i\n",
        "  return fact == n\n",
        "\n",
        "# Example usage:\n",
        "num_to_check = 120\n",
        "if is_factorial(num_to_check):\n",
        "  print(f\"{num_to_check} is a factorial number.\")\n",
        "else:\n",
        "  print(f\"{num_to_check} is not a factorial number.\")\n",
        "\n",
        "num_to_check = 150\n",
        "if is_factorial(num_to_check):\n",
        "  print(f\"{num_to_check} is a factorial number.\")\n",
        "else:\n",
        "  print(f\"{num_to_check} is not a factorial number.\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "120 is a factorial number.\n",
            "150 is not a factorial number.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Explanation:**\n",
        "This Python function is_factorial(n) checks if a given number n is a factorial of any non-negative integer. It handles negative numbers and the base case of 1. For other numbers, it iteratively calculates factorials until it finds one equal to or exceeding n, then checks for equality."
      ],
      "metadata": {
        "id": "if_jc4b5xHnO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "prompt3;list the factorial numbers for 1 to 50"
      ],
      "metadata": {
        "id": "De7e4le6xNms"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6fd13a59",
        "outputId": "856d0c5f-f110-4fe6-e337-009f50d84878"
      },
      "source": [
        "def factorial(n):\n",
        "  \"\"\"Calculates the factorial of a non-negative integer.\"\"\"\n",
        "  if n < 0:\n",
        "    return None # Return None for negative numbers as factorial is not defined\n",
        "  elif n == 0:\n",
        "    return 1\n",
        "  else:\n",
        "    result = 1\n",
        "    for i in range(1, n + 1):\n",
        "      result *= i\n",
        "    return result\n",
        "\n",
        "factorial_numbers = []\n",
        "i = 0\n",
        "while True:\n",
        "  fact = factorial(i)\n",
        "  if fact is None or fact > 50:\n",
        "    break\n",
        "  if fact >= 1:\n",
        "    factorial_numbers.append(fact)\n",
        "  i += 1\n",
        "\n",
        "print(\"Factorial numbers between 1 and 50:\")\n",
        "print(factorial_numbers)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Factorial numbers between 1 and 50:\n",
            "[1, 1, 2, 6, 24]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This code snippet first defines a factorial function (similar to the previous one, but returning None for negative inputs). Then, it iteratively calculates factorials starting from 0!, adding them to a list factorial_numbers as long as they are less than or equal to 50. Finally, it prints the list of collected factorial numbers within that range.\n",
        "\n",
        "**(Explanation)**"
      ],
      "metadata": {
        "id": "-V8cgEa4zCHh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task2:Provide a clear example input-output prompt to generate a sorting function.\n",
        "promppt:generate a sorting function"
      ],
      "metadata": {
        "id": "uCobayrOz6Sd"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8034527e",
        "outputId": "c783b1c0-861d-49ad-eea4-a9f1d1aaedfb"
      },
      "source": [
        "def sort_list(input_list):\n",
        "  \"\"\"Sorts a list in ascending order.\n",
        "\n",
        "  Args:\n",
        "    input_list: The list to be sorted.\n",
        "\n",
        "  Returns:\n",
        "    A new list containing the sorted elements.\n",
        "  \"\"\"\n",
        "  return sorted(input_list)\n",
        "\n",
        "# Example usage:\n",
        "my_list = [3, 1, 4, 1, 5, 9, 2, 6]\n",
        "sorted_my_list = sort_list(my_list)\n",
        "print(f\"Original list: {my_list}\")\n",
        "print(f\"Sorted list: {sorted_my_list}\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original list: [3, 1, 4, 1, 5, 9, 2, 6]\n",
            "Sorted list: [1, 1, 2, 3, 4, 5, 6, 9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Explanation:**\n",
        "The selected code defines a Python function sort_list that sorts a list in ascending order using the built-in sorted() function and returns a new sorted list. The example usage shows how to call the function with a sample list and prints both the original and sorted lists."
      ],
      "metadata": {
        "id": "5GFPqd3K0fBd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task3;Start with the vague prompt “Generate python code to calculate power bill” and\n",
        "improve it step-by-step\n",
        "prompt:Generate python code to calculate power bill"
      ],
      "metadata": {
        "id": "BcYNEiAN0wSU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "P72Imbjl1pAq"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "27e13020",
        "outputId": "ff6c9153-8824-4921-9644-eea5c87e5519"
      },
      "source": [
        "def calculate_tiered_power_bill(consumption_kwh, tiers):\n",
        "  \"\"\"Calculates a power bill based on tiered pricing.\n",
        "\n",
        "  Args:\n",
        "    consumption_kwh: The total power consumed in kWh.\n",
        "    tiers: A dictionary where keys are the upper limit of a tier (or float('inf') for the last tier)\n",
        "           and values are the rate per kWh for that tier. Tiers should be sorted by their upper limits.\n",
        "\n",
        "  Returns:\n",
        "    The total bill amount.\n",
        "  \"\"\"\n",
        "  total_bill = 0\n",
        "  remaining_consumption = consumption_kwh\n",
        "\n",
        "  for upper_limit, rate in sorted(tiers.items()):\n",
        "    if remaining_consumption <= 0:\n",
        "      break\n",
        "\n",
        "    if remaining_consumption <= upper_limit:\n",
        "      bill_in_tier = remaining_consumption * rate\n",
        "      total_bill += bill_in_tier\n",
        "      remaining_consumption = 0\n",
        "    else:\n",
        "      bill_in_tier = upper_limit * rate\n",
        "      total_bill += bill_in_tier\n",
        "      remaining_consumption -= upper_limit\n",
        "\n",
        "  return total_bill\n",
        "\n",
        "# Example usage (replace with your actual tiers and rates):\n",
        "power_tiers = {\n",
        "    200: 0.10,   # First 200 kWh at $0.10/kWh\n",
        "    500: 0.15,   # Next 300 kWh (up to 500 total) at $0.15/kWh\n",
        "    float('inf'): 0.20 # Anything above 500 kWh at $0.20/kWh\n",
        "}\n",
        "\n",
        "monthly_consumption = 600  # kWh\n",
        "\n",
        "bill_amount = calculate_tiered_power_bill(monthly_consumption, power_tiers)\n",
        "print(f\"Your power bill is: ${bill_amount:.2f}\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Your power bill is: $80.00\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Explanation:**\n",
        "This Python function calculate_tiered_power_bill calculates a power bill based on tiered pricing.\n",
        "Function Definition: It takes consumption_kwh (total power consumed) and tiers (a dictionary defining the consumption tiers and their rates) as input.\n",
        "Initialization: total_bill is initialized to 0, and remaining_consumption is set to the total consumption.\n",
        "Iterating Through Tiers: The code iterates through the tiers dictionary, ensuring the tiers are processed in ascending order of their upper limits using sorted(tiers.items()).\n",
        "Calculating Bill per Tier:\n",
        "It checks if there is any remaining_consumption. If not, it breaks the loop.\n",
        "If the remaining_consumption is less than or equal to the current tier's upper_limit, it calculates the bill_in_tier for the remaining consumption at the current tier's rate. The total_bill is updated, and remaining_consumption becomes 0.\n",
        "If the remaining_consumption is greater than the current tier's upper_limit, it calculates the bill_in_tier for the full amount of the current tier (upper_limit) at the current tier's rate. The total_bill is updated, and remaining_consumption is reduced by the upper_limit of the current tier.\n",
        "Return Value: After processing all relevant tiers, the function returns the calculated total_bill."
      ],
      "metadata": {
        "id": "Qb7qn65o2piU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task4;Write structured comments to help AI generate two linked functions"
      ],
      "metadata": {
        "id": "DtDSFO4m2ydE"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "92311341",
        "outputId": "b4bed1dc-c197-4105-ed03-8b1637f9d61a"
      },
      "source": [
        "# Function: register_user\n",
        "# Description: Registers a new user with a username and password.\n",
        "# Parameters:\n",
        "# - username (str): The desired username.\n",
        "# - password (str): The desired password.\n",
        "# Returns:\n",
        "# - bool: True if registration is successful, False otherwise (e.g., username already exists).\n",
        "# Linked Function: login_user - A user registered successfully can then log in.\n",
        "def register_user(username, password):\n",
        "  # In a real application, you would store the username and a hashed password\n",
        "  # in a database. For this example, we'll use a simple in-memory dictionary.\n",
        "  if username in registered_users:\n",
        "    print(f\"Username '{username}' already exists.\")\n",
        "    return False\n",
        "  registered_users[username] = password # Store password (should be hashed in production)\n",
        "  print(f\"User '{username}' registered successfully.\")\n",
        "  return True\n",
        "\n",
        "# In-memory storage for registered users (username: password) - replace with database in production\n",
        "registered_users = {}\n",
        "\n",
        "# Function: login_user\n",
        "# Description: Logs in an existing user using their username and password.\n",
        "# Parameters:\n",
        "# - username (str): The username for login.\n",
        "# - password (str): The password for login.\n",
        "# Returns:\n",
        "# - bool: True if login is successful, False otherwise (e.g., incorrect username or password).\n",
        "# Linked Function: register_user - Users must be registered before they can log in.\n",
        "def login_user(username, password):\n",
        "  # In a real application, you would compare the provided password with the hashed password\n",
        "  # from the database.\n",
        "  if username not in registered_users:\n",
        "    print(f\"Username '{username}' not found.\")\n",
        "    return False\n",
        "  if registered_users[username] != password: # Compare password (should compare with hashed password)\n",
        "    print(\"Incorrect password.\")\n",
        "    return False\n",
        "  print(f\"User '{username}' logged in successfully.\")\n",
        "  return True\n",
        "\n",
        "# Example Usage:\n",
        "register_user(\"testuser\", \"password123\")\n",
        "login_user(\"testuser\", \"password123\")\n",
        "login_user(\"testuser\", \"wrongpassword\")\n",
        "login_user(\"nonexistentuser\", \"anypassword\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "User 'testuser' registered successfully.\n",
            "User 'testuser' logged in successfully.\n",
            "Incorrect password.\n",
            "Username 'nonexistentuser' not found.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Eplanation:**\n",
        "This Python function register_user(username, password) registers a new user by adding their username and password to a dictionary, preventing duplicate usernames."
      ],
      "metadata": {
        "id": "nKvq7UKK3qpI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task5;Improving Temperature Conversion Function with\n",
        "Clear Instructions\n",
        "prompt:generate a code to improve temperature conditions with clear instructions"
      ],
      "metadata": {
        "id": "W85FVMr_3z6s"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7fdb2a26",
        "outputId": "85f1904f-c744-4c67-ef44-42a7533a4cb1"
      },
      "source": [
        "def celsius_to_fahrenheit(celsius):\n",
        "  \"\"\"Converts Celsius to Fahrenheit.\"\"\"\n",
        "  return (celsius * 9/5) + 32\n",
        "\n",
        "def fahrenheit_to_celsius(fahrenheit):\n",
        "  \"\"\"Converts Fahrenheit to Celsius.\"\"\"\n",
        "  return (fahrenheit - 32) * 5/9\n",
        "\n",
        "def celsius_to_kelvin(celsius):\n",
        "  \"\"\"Converts Celsius to Kelvin.\"\"\"\n",
        "  return celsius + 273.15\n",
        "\n",
        "def kelvin_to_celsius(kelvin):\n",
        "  \"\"\"Converts Kelvin to Celsius.\"\"\"\n",
        "  return kelvin - 273.15\n",
        "\n",
        "# Example usage\n",
        "celsius_temp = 25\n",
        "fahrenheit_temp = 77\n",
        "kelvin_temp = 300\n",
        "\n",
        "print(f\"{celsius_temp}°C is {celsius_to_fahrenheit(celsius_temp):.2f}°F\")\n",
        "print(f\"{fahrenheit_temp}°F is {fahrenheit_to_celsius(fahrenheit_temp):.2f}°C\")\n",
        "print(f\"{celsius_temp}°C is {celsius_to_kelvin(celsius_temp):.2f}K\")\n",
        "print(f\"{kelvin_temp}K is {kelvin_to_celsius(kelvin_temp):.2f}°C\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "25°C is 77.00°F\n",
            "77°F is 25.00°C\n",
            "25°C is 298.15K\n",
            "300K is 26.85°C\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ec908b36",
        "outputId": "3ee602e3-cc94-4e54-8a04-6e03732bc581"
      },
      "source": [
        "# 1. Create a Python list named temperature_data\n",
        "temperature_data = [22, 24, 21, 25, 23, 26]\n",
        "\n",
        "# 2. Calculate the minimum temperature\n",
        "min_temp = min(temperature_data)\n",
        "\n",
        "# 3. Calculate the maximum temperature\n",
        "max_temp = max(temperature_data)\n",
        "\n",
        "# 4. Calculate the average temperature\n",
        "average_temp = sum(temperature_data) / len(temperature_data)\n",
        "\n",
        "# 5. Print the calculated minimum, maximum, and average temperatures\n",
        "print(f\"Sample Temperature Data: {temperature_data}\")\n",
        "print(f\"Minimum Temperature: {min_temp}°C\")\n",
        "print(f\"Maximum Temperature: {max_temp}°C\")\n",
        "print(f\"Average Temperature: {average_temp:.2f}°C\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sample Temperature Data: [22, 24, 21, 25, 23, 26]\n",
            "Minimum Temperature: 21°C\n",
            "Maximum Temperature: 26°C\n",
            "Average Temperature: 23.50°C\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e0bfd7d0",
        "outputId": "521b7227-7238-4718-b5cd-7e050a0c40fd"
      },
      "source": [
        "# Define starting and target temperatures\n",
        "start_temp = 20\n",
        "target_temp = 30\n",
        "\n",
        "# Define the step change in temperature per time step\n",
        "step_change = 1\n",
        "\n",
        "# Define the maximum number of steps to prevent infinite loops\n",
        "max_steps = 20\n",
        "\n",
        "# Initialize the current temperature\n",
        "current_temp = start_temp\n",
        "\n",
        "print(f\"Starting temperature: {current_temp}°C\")\n",
        "print(f\"Target temperature: {target_temp}°C\")\n",
        "print(\"-\" * 20)\n",
        "\n",
        "# Simulate temperature change over several steps\n",
        "step_count = 0\n",
        "while current_temp < target_temp and step_count < max_steps:\n",
        "  step_count += 1\n",
        "  current_temp += step_change\n",
        "  print(f\"Step {step_count}: Current temperature is {current_temp}°C\")\n",
        "\n",
        "# Print a message when the target temperature is reached or exceeded\n",
        "if current_temp >= target_temp:\n",
        "  print(\"-\" * 20)\n",
        "  print(\"Target temperature reached or exceeded.\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Starting temperature: 20°C\n",
            "Target temperature: 30°C\n",
            "--------------------\n",
            "Step 1: Current temperature is 21°C\n",
            "Step 2: Current temperature is 22°C\n",
            "Step 3: Current temperature is 23°C\n",
            "Step 4: Current temperature is 24°C\n",
            "Step 5: Current temperature is 25°C\n",
            "Step 6: Current temperature is 26°C\n",
            "Step 7: Current temperature is 27°C\n",
            "Step 8: Current temperature is 28°C\n",
            "Step 9: Current temperature is 29°C\n",
            "Step 10: Current temperature is 30°C\n",
            "--------------------\n",
            "Target temperature reached or exceeded.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Explanation:**\n",
        "*condition 1: *\n",
        "The code provides functions to convert temperature between Celsius, Fahrenheit, and Kelvin using standard conversion formulas.\n",
        "**condition 2:**\n",
        "The selected code calculates the minimum, maximum, and average of a list of temperatures. It stores a sample list of temperatures in the variable temperature_data, then uses the built-in min(), max(), and sum() functions, along with len(), to find the minimum, maximum, and average temperatures, respectively. Finally, it prints the original data and the calculated statistics.\n",
        "**condtion3:**\n",
        "The selected code simulates a basic temperature change over time. It starts with a start_temp and gradually increases the current_temp by a step_change in each iteration of a while loop until it reaches or exceeds the target_temp or the max_steps is reached. It prints the temperature at each step of the simulation.\n"
      ],
      "metadata": {
        "id": "ccap7uZF6gy_"
      }
    }
  ]
}
